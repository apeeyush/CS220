/*
 * Generated by Bluespec Compiler, version 2011.06.D (build 24470, 2011-06-30)
 * 
 * On Fri Mar 14 00:04:09 IST 2014
 * 
 */

/* Generation options: */
#ifndef __mkProc_h__
#define __mkProc_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkCop.h"
#include "mkDMemory.h"
#include "mkIMemory.h"
#include "mkRFile.h"
#include "module_exec.h"
#include "module_decode.h"

namespace bluesim
{
  
  /* Class declaration for the mkProc module */
  class MOD_mkProc : public Module {
   
   /* Clock handles */
   private:
    tClock __clk_handle_0;
   
   /* Instantiation parameters */
   public:
   
   /* Module state */
   public:
    MOD_mkCop INST_cop;
    MOD_mkDMemory INST_dMem;
    MOD_mkIMemory INST_iMem;
    MOD_Reg<tUInt32> INST_ir;
    MOD_Reg<tUInt32> INST_pc;
    MOD_mkRFile INST_rf;
    MOD_Reg<tUInt8> INST_state;
    MOD_module_exec INST_instance_exec_1;
    MOD_module_decode INST_instance_decode_0;
   
   /* Constructor */
   public:
    MOD_mkProc(char const *name, Module *parent);
   
   /* Symbol init methods */
   private:
    void init_symbols_0();
   
   /* Reset signal definitions */
   private:
    tUInt8 PORT_RST_N;
   
   /* Port definitions */
   public:
   
   /* Publicly accessible definitions */
   public:
    tUInt8 DEF_cop_started____d366;
   
   /* Local definitions */
   private:
    tUWide DEF_exec___d365;
    tUWide DEF_decode_06_BITS_64_TO_54_07_CONCAT_decode_06_BI_ETC___d324;
    tUInt32 DEF_pc___d359;
    tUWide DEF_decode___d379;
    tUInt32 DEF_v__h1976;
    tUWide DEF__0_CONCAT_pc_CONCAT_DONTCARE___d6;
    tUWide DEF_NOT_exec_32_BITS_76_TO_73_33_EQ_2_35_38_CONCAT_ETC___d345;
   
   /* Rules */
   public:
    void RL_doFetch();
    void RL_doExecute();
   
   /* Methods */
   public:
    tUInt64 METH_cpuToHost();
    tUInt8 METH_RDY_cpuToHost();
    void METH_hostToCpu(tUInt32 ARG_hostToCpu_startpc);
    tUInt8 METH_RDY_hostToCpu();
   
   /* Reset routines */
   public:
    void reset_RST_N(tUInt8 ARG_rst_in);
   
   /* Static handles to reset routines */
   public:
   
   /* Pointers to reset fns in parent module for asserting output resets */
   private:
   
   /* Functions for the parent module to register its reset fns */
   public:
   
   /* Functions to set the elaborated clock id */
   public:
    void set_clk_0(char const *s);
   
   /* State dumping routine */
   public:
    void dump_state(unsigned int indent);
   
   /* VCD dumping routines */
   public:
    unsigned int dump_VCD_defs(unsigned int levels);
    void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkProc &backing);
    void vcd_defs(tVCDDumpType dt, MOD_mkProc &backing);
    void vcd_prims(tVCDDumpType dt, MOD_mkProc &backing);
    void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkProc &backing);
  };
}

#endif /* ifndef __mkProc_h__ */
