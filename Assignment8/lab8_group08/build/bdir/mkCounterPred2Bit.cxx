/*
 * Generated by Bluespec Compiler, version 2011.06.D (build 24470, 2011-06-30)
 * 
 * On Thu Apr  3 21:14:10 IST 2014
 * 
 */
#include "bluesim_primitives.h"
#include "mkCounterPred2Bit.h"

namespace bluesim
{
  
  /* Constructor */
  MOD_mkCounterPred2Bit::MOD_mkCounterPred2Bit(char const *name, Module *parent)
    : Module(name, parent),
      __clk_handle_0(BAD_CLOCK_HANDLE),
      INST_counters("counters", this, 10u, 1u, 0u, 1023u),
      INST_initialize("initialize", this, 11u, 0u, (tUInt8)0u),
      INST_tags("tags", this, 10u, 21u, 0u, 1023u),
      PORT_RST_N((tUInt8)1u)
  {
    PORT_update_rd.setSize(70u);
    PORT_update_rd.clear();
    symbol_count = 7u;
    symbols = new tSym[symbol_count];
    init_symbols_0();
  }
  
  
  /* Symbol init fns */
  
  void MOD_mkCounterPred2Bit::init_symbols_0()
  {
    init_symbol(&symbols[0u], "counters", SYM_MODULE, &INST_counters);
    init_symbol(&symbols[1u], "initialize", SYM_MODULE, &INST_initialize);
    init_symbol(&symbols[2u], "RL_init", SYM_RULE);
    init_symbol(&symbols[3u], "tags", SYM_MODULE, &INST_tags);
    init_symbol(&symbols[4u], "update_rd", SYM_PORT, &PORT_update_rd, 70u);
    init_symbol(&symbols[5u], "x__h522", SYM_DEF, &DEF_x__h522, 11u);
    init_symbol(&symbols[6u], "x_BIT_10___h494", SYM_DEF, &DEF_x_BIT_10___h494, 1u);
  }
  
  
  /* Rule actions */
  
  void MOD_mkCounterPred2Bit::RL_init()
  {
    tUInt32 DEF_x__h527;
    tUInt32 DEF_i__h509;
    DEF_x__h522 = INST_initialize.METH_read();
    DEF_i__h509 = (tUInt32)(1023u & DEF_x__h522);
    DEF_x__h527 = 2047u & (DEF_x__h522 + 1u);
    INST_counters.METH_upd(DEF_i__h509, (tUInt8)0u);
    INST_initialize.METH_write(DEF_x__h527);
  }
  
  
  /* Methods */
  
  tUInt8 MOD_mkCounterPred2Bit::METH_predDir(tUInt32 ARG_predDir_pc)
  {
    tUInt8 PORT_predDir;
    tUInt8 DEF_tags_sub_predDir_pc_BITS_11_TO_2_BITS_19_TO_0__ETC___d13;
    tUInt8 DEF_tags_sub_predDir_pc_BITS_11_TO_2_BIT_20___d45;
    tUInt32 DEF_tag__h550;
    tUInt32 DEF_idx__h549;
    tUInt32 DEF_tags_sub_predDir_pc_BITS_11_TO_2___d43;
    DEF_idx__h549 = (tUInt32)(1023u & (ARG_predDir_pc >> 2u));
    DEF_tags_sub_predDir_pc_BITS_11_TO_2___d43 = INST_tags.METH_sub(DEF_idx__h549);
    DEF_tag__h550 = (tUInt32)(ARG_predDir_pc >> 12u);
    DEF_tags_sub_predDir_pc_BITS_11_TO_2_BIT_20___d45 = (tUInt8)(DEF_tags_sub_predDir_pc_BITS_11_TO_2___d43 >> 20u);
    DEF_tags_sub_predDir_pc_BITS_11_TO_2_BITS_19_TO_0__ETC___d13 = ((tUInt32)(1048575u & DEF_tags_sub_predDir_pc_BITS_11_TO_2___d43)) == DEF_tag__h550 && INST_counters.METH_sub(DEF_idx__h549);
    PORT_predDir = DEF_tags_sub_predDir_pc_BITS_11_TO_2_BIT_20___d45 && DEF_tags_sub_predDir_pc_BITS_11_TO_2_BITS_19_TO_0__ETC___d13;
    return PORT_predDir;
  }
  
  tUInt8 MOD_mkCounterPred2Bit::METH_RDY_predDir()
  {
    tUInt8 PORT_RDY_predDir;
    tUInt8 DEF_CAN_FIRE_predDir;
    DEF_x__h522 = INST_initialize.METH_read();
    DEF_x_BIT_10___h494 = (tUInt8)(DEF_x__h522 >> 10u);
    DEF_CAN_FIRE_predDir = DEF_x_BIT_10___h494;
    PORT_RDY_predDir = DEF_CAN_FIRE_predDir;
    return PORT_RDY_predDir;
  }
  
  void MOD_mkCounterPred2Bit::METH_update(tUWide ARG_update_rd)
  {
    tUInt32 DEF__1_CONCAT_update_rd_BITS_69_TO_50_1___d40;
    tUInt8 DEF_update_rd_BITS_5_TO_2_4_EQ_6_5_AND_NOT_tags_su_ETC___d39;
    tUInt8 DEF_update_rd_BITS_5_TO_2_4_EQ_6_5_AND_NOT_tags_su_ETC___d33;
    tUInt8 DEF_update_rd_BITS_5_TO_2_4_EQ_6___d15;
    tUInt8 DEF_x__h881;
    tUInt8 DEF_x__h869;
    tUInt8 DEF_IF_NOT_tags_sub_update_rd_BITS_49_TO_40_6_7_BI_ETC___d38;
    tUInt32 DEF_update_rd_BITS_69_TO_50___d42;
    tUInt8 DEF_counters_sub_update_rd_BITS_49_TO_40_6___d41;
    tUInt32 DEF_idx__h708;
    tUInt32 DEF_tags_sub_update_rd_BITS_49_TO_40_6___d44;
    tUInt8 DEF_update_rd_BIT_0___d49;
    tUInt8 DEF_update_rd_BIT_0_5_AND_counters_sub_update_rd_B_ETC___d31;
    tUInt8 DEF_NOT_tags_sub_update_rd_BITS_49_TO_40_6_7_BIT_2_ETC___d50;
    PORT_update_rd = ARG_update_rd;
    DEF_update_rd_BIT_0___d49 = primExtract8(1u, 70u, ARG_update_rd, 32u, 0u, 32u, 0u);
    DEF_idx__h708 = primExtract32(10u, 70u, ARG_update_rd, 32u, 49u, 32u, 40u);
    DEF_tags_sub_update_rd_BITS_49_TO_40_6___d44 = INST_tags.METH_sub(DEF_idx__h708);
    DEF_counters_sub_update_rd_BITS_49_TO_40_6___d41 = INST_counters.METH_sub(DEF_idx__h708);
    DEF_update_rd_BIT_0_5_AND_counters_sub_update_rd_B_ETC___d31 = (DEF_update_rd_BIT_0___d49 && DEF_counters_sub_update_rd_BITS_49_TO_40_6___d41) || (!DEF_update_rd_BIT_0___d49 && !DEF_counters_sub_update_rd_BITS_49_TO_40_6___d41);
    DEF_update_rd_BITS_69_TO_50___d42 = primExtract32(20u, 70u, ARG_update_rd, 32u, 69u, 32u, 50u);
    DEF_NOT_tags_sub_update_rd_BITS_49_TO_40_6_7_BIT_2_ETC___d50 = !((tUInt8)(DEF_tags_sub_update_rd_BITS_49_TO_40_6___d44 >> 20u)) || !(((tUInt32)(1048575u & DEF_tags_sub_update_rd_BITS_49_TO_40_6___d44)) == DEF_update_rd_BITS_69_TO_50___d42);
    DEF_x__h869 = (tUInt8)1u & (DEF_counters_sub_update_rd_BITS_49_TO_40_6___d41 - (tUInt8)1u);
    DEF_x__h881 = (tUInt8)1u & (DEF_counters_sub_update_rd_BITS_49_TO_40_6___d41 + (tUInt8)1u);
    DEF_IF_NOT_tags_sub_update_rd_BITS_49_TO_40_6_7_BI_ETC___d38 = DEF_NOT_tags_sub_update_rd_BITS_49_TO_40_6_7_BIT_2_ETC___d50 ? primExtract8(1u,
																	       70u,
																	       ARG_update_rd,
																	       32u,
																	       1u,
																	       32u,
																	       1u) : (DEF_update_rd_BIT_0___d49 ? DEF_x__h869 : DEF_x__h881);
    DEF_update_rd_BITS_5_TO_2_4_EQ_6___d15 = primExtract8(4u,
							  70u,
							  ARG_update_rd,
							  32u,
							  5u,
							  32u,
							  2u) == (tUInt8)6u;
    DEF_update_rd_BITS_5_TO_2_4_EQ_6_5_AND_NOT_tags_su_ETC___d33 = DEF_update_rd_BITS_5_TO_2_4_EQ_6___d15 && (DEF_NOT_tags_sub_update_rd_BITS_49_TO_40_6_7_BIT_2_ETC___d50 || DEF_update_rd_BIT_0_5_AND_counters_sub_update_rd_B_ETC___d31);
    DEF_update_rd_BITS_5_TO_2_4_EQ_6_5_AND_NOT_tags_su_ETC___d39 = DEF_update_rd_BITS_5_TO_2_4_EQ_6___d15 && DEF_NOT_tags_sub_update_rd_BITS_49_TO_40_6_7_BIT_2_ETC___d50;
    DEF__1_CONCAT_update_rd_BITS_69_TO_50_1___d40 = 2097151u & ((((tUInt32)((tUInt8)1u)) << 20u) | DEF_update_rd_BITS_69_TO_50___d42);
    if (DEF_update_rd_BITS_5_TO_2_4_EQ_6_5_AND_NOT_tags_su_ETC___d33)
      INST_counters.METH_upd(DEF_idx__h708, DEF_IF_NOT_tags_sub_update_rd_BITS_49_TO_40_6_7_BI_ETC___d38);
    if (DEF_update_rd_BITS_5_TO_2_4_EQ_6_5_AND_NOT_tags_su_ETC___d39)
      INST_tags.METH_upd(DEF_idx__h708, DEF__1_CONCAT_update_rd_BITS_69_TO_50_1___d40);
  }
  
  tUInt8 MOD_mkCounterPred2Bit::METH_RDY_update()
  {
    tUInt8 PORT_RDY_update;
    tUInt8 DEF_CAN_FIRE_update;
    DEF_x__h522 = INST_initialize.METH_read();
    DEF_x_BIT_10___h494 = (tUInt8)(DEF_x__h522 >> 10u);
    DEF_CAN_FIRE_update = DEF_x_BIT_10___h494;
    PORT_RDY_update = DEF_CAN_FIRE_update;
    return PORT_RDY_update;
  }
  
  
  /* Reset routines */
  
  void MOD_mkCounterPred2Bit::reset_RST_N(tUInt8 ARG_rst_in)
  {
    PORT_RST_N = ARG_rst_in;
    INST_initialize.reset_RST_N(ARG_rst_in);
  }
  
  
  /* Static handles to reset routines */
  
  
  /* Functions for the parent module to register its reset fns */
  
  
  /* Functions to set the elaborated clock id */
  
  void MOD_mkCounterPred2Bit::set_clk_0(char const *s)
  {
    __clk_handle_0 = bk_get_or_define_clock(s);
  }
  
  
  /* State dumping routine */
  void MOD_mkCounterPred2Bit::dump_state(unsigned int indent)
  {
    printf("%*s%s:\n", indent, "", inst_name);
    INST_counters.dump_state(indent + 2u);
    INST_initialize.dump_state(indent + 2u);
    INST_tags.dump_state(indent + 2u);
  }
  
  
  /* VCD dumping routines */
  
  unsigned int MOD_mkCounterPred2Bit::dump_VCD_defs(unsigned int levels)
  {
    fprintf(vcd_file, "$scope module %s $end\n", inst_name);
    vcd_num = vcd_reserve_ids(7u);
    unsigned int num = vcd_num;
    for (unsigned int hdl = 0u; hdl < bk_num_clocks(); ++hdl)
      vcd_add_clock_def(this, bk_clock_name(hdl), bk_clock_vcd_num(hdl));
    vcd_write_def(bk_clock_vcd_num(__clk_handle_0), "CLK", 1u);
    vcd_write_def(num++, "RST_N", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "x_BIT_10___h494", 1u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "x__h522", 11u);
    vcd_set_clock(num, __clk_handle_0);
    vcd_write_def(num++, "update_rd", 70u);
    num = INST_counters.dump_VCD_defs(num);
    num = INST_initialize.dump_VCD_defs(num);
    num = INST_tags.dump_VCD_defs(num);
    fprintf(vcd_file, "$upscope $end\n");
    return num;
  }
  
  void MOD_mkCounterPred2Bit::dump_VCD(tVCDDumpType dt,
				       unsigned int levels,
				       MOD_mkCounterPred2Bit &backing)
  {
    vcd_defs(dt, backing);
    vcd_prims(dt, backing);
  }
  
  void MOD_mkCounterPred2Bit::vcd_defs(tVCDDumpType dt, MOD_mkCounterPred2Bit &backing)
  {
    unsigned int num = vcd_num;
    if (dt == VCD_DUMP_XS)
    {
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 1u);
      vcd_write_x(num++, 11u);
      vcd_write_x(num++, 70u);
    }
    else
      if (dt == VCD_DUMP_CHANGES)
      {
	if ((backing.PORT_RST_N) != PORT_RST_N)
	{
	  vcd_write_val(num, PORT_RST_N, 1u);
	  backing.PORT_RST_N = PORT_RST_N;
	}
	++num;
	if ((backing.DEF_x_BIT_10___h494) != DEF_x_BIT_10___h494)
	{
	  vcd_write_val(num, DEF_x_BIT_10___h494, 1u);
	  backing.DEF_x_BIT_10___h494 = DEF_x_BIT_10___h494;
	}
	++num;
	if ((backing.DEF_x__h522) != DEF_x__h522)
	{
	  vcd_write_val(num, DEF_x__h522, 11u);
	  backing.DEF_x__h522 = DEF_x__h522;
	}
	++num;
	if ((backing.PORT_update_rd) != PORT_update_rd)
	{
	  vcd_write_val(num, PORT_update_rd, 70u);
	  backing.PORT_update_rd = PORT_update_rd;
	}
	++num;
      }
      else
      {
	vcd_write_val(num++, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
	vcd_write_val(num++, DEF_x_BIT_10___h494, 1u);
	backing.DEF_x_BIT_10___h494 = DEF_x_BIT_10___h494;
	vcd_write_val(num++, DEF_x__h522, 11u);
	backing.DEF_x__h522 = DEF_x__h522;
	vcd_write_val(num++, PORT_update_rd, 70u);
	backing.PORT_update_rd = PORT_update_rd;
      }
  }
  
  void MOD_mkCounterPred2Bit::vcd_prims(tVCDDumpType dt, MOD_mkCounterPred2Bit &backing)
  {
    INST_counters.dump_VCD(dt, backing.INST_counters);
    INST_initialize.dump_VCD(dt, backing.INST_initialize);
    INST_tags.dump_VCD(dt, backing.INST_tags);
  }
}
