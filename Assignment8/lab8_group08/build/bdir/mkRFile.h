/*
 * Generated by Bluespec Compiler, version 2011.06.D (build 24470, 2011-06-30)
 * 
 * On Thu Apr  3 20:09:05 IST 2014
 * 
 */

/* Generation options: */
#ifndef __mkRFile_h__
#define __mkRFile_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"

namespace bluesim
{
  
  /* Class declaration for the mkRFile module */
  class MOD_mkRFile : public Module {
   
   /* Clock handles */
   private:
    tClock __clk_handle_0;
   
   /* Instantiation parameters */
   public:
   
   /* Module state */
   public:
    MOD_ConfigReg<tUInt32> INST_rfile;
    MOD_ConfigReg<tUInt32> INST_rfile_1;
    MOD_ConfigReg<tUInt32> INST_rfile_10;
    MOD_ConfigReg<tUInt32> INST_rfile_11;
    MOD_ConfigReg<tUInt32> INST_rfile_12;
    MOD_ConfigReg<tUInt32> INST_rfile_13;
    MOD_ConfigReg<tUInt32> INST_rfile_14;
    MOD_ConfigReg<tUInt32> INST_rfile_15;
    MOD_ConfigReg<tUInt32> INST_rfile_16;
    MOD_ConfigReg<tUInt32> INST_rfile_17;
    MOD_ConfigReg<tUInt32> INST_rfile_18;
    MOD_ConfigReg<tUInt32> INST_rfile_19;
    MOD_ConfigReg<tUInt32> INST_rfile_2;
    MOD_ConfigReg<tUInt32> INST_rfile_20;
    MOD_ConfigReg<tUInt32> INST_rfile_21;
    MOD_ConfigReg<tUInt32> INST_rfile_22;
    MOD_ConfigReg<tUInt32> INST_rfile_23;
    MOD_ConfigReg<tUInt32> INST_rfile_24;
    MOD_ConfigReg<tUInt32> INST_rfile_25;
    MOD_ConfigReg<tUInt32> INST_rfile_26;
    MOD_ConfigReg<tUInt32> INST_rfile_27;
    MOD_ConfigReg<tUInt32> INST_rfile_28;
    MOD_ConfigReg<tUInt32> INST_rfile_29;
    MOD_ConfigReg<tUInt32> INST_rfile_3;
    MOD_ConfigReg<tUInt32> INST_rfile_30;
    MOD_ConfigReg<tUInt32> INST_rfile_31;
    MOD_ConfigReg<tUInt32> INST_rfile_4;
    MOD_ConfigReg<tUInt32> INST_rfile_5;
    MOD_ConfigReg<tUInt32> INST_rfile_6;
    MOD_ConfigReg<tUInt32> INST_rfile_7;
    MOD_ConfigReg<tUInt32> INST_rfile_8;
    MOD_ConfigReg<tUInt32> INST_rfile_9;
   
   /* Constructor */
   public:
    MOD_mkRFile(char const *name, Module *parent);
   
   /* Symbol init methods */
   private:
    void init_symbols_0();
   
   /* Reset signal definitions */
   private:
    tUInt8 PORT_RST_N;
   
   /* Port definitions */
   public:
   
   /* Publicly accessible definitions */
   public:
   
   /* Local definitions */
   private:
    tUInt32 DEF__read__h1965;
    tUInt32 DEF__read__h1931;
    tUInt32 DEF__read__h1897;
    tUInt32 DEF__read__h1863;
    tUInt32 DEF__read__h1829;
    tUInt32 DEF__read__h1795;
    tUInt32 DEF__read__h1761;
    tUInt32 DEF__read__h1727;
    tUInt32 DEF__read__h1693;
    tUInt32 DEF__read__h1659;
    tUInt32 DEF__read__h1625;
    tUInt32 DEF__read__h1591;
    tUInt32 DEF__read__h1557;
    tUInt32 DEF__read__h1523;
    tUInt32 DEF__read__h1489;
    tUInt32 DEF__read__h1455;
    tUInt32 DEF__read__h1421;
    tUInt32 DEF__read__h1387;
    tUInt32 DEF__read__h1353;
    tUInt32 DEF__read__h1319;
    tUInt32 DEF__read__h1285;
    tUInt32 DEF__read__h1251;
    tUInt32 DEF__read__h1217;
    tUInt32 DEF__read__h1183;
    tUInt32 DEF__read__h1149;
    tUInt32 DEF__read__h1115;
    tUInt32 DEF__read__h1081;
    tUInt32 DEF__read__h1047;
    tUInt32 DEF__read__h1013;
    tUInt32 DEF__read__h979;
    tUInt32 DEF__read__h945;
    tUInt32 DEF__read__h911;
   
   /* Rules */
   public:
   
   /* Methods */
   public:
    void METH_wr(tUInt8 ARG_wr_rindx, tUInt32 ARG_wr_data);
    tUInt8 METH_RDY_wr();
    tUInt32 METH_rd1(tUInt8 ARG_rd1_rindx);
    tUInt8 METH_RDY_rd1();
    tUInt32 METH_rd2(tUInt8 ARG_rd2_rindx);
    tUInt8 METH_RDY_rd2();
   
   /* Reset routines */
   public:
    void reset_RST_N(tUInt8 ARG_rst_in);
   
   /* Static handles to reset routines */
   public:
   
   /* Pointers to reset fns in parent module for asserting output resets */
   private:
   
   /* Functions for the parent module to register its reset fns */
   public:
   
   /* Functions to set the elaborated clock id */
   public:
    void set_clk_0(char const *s);
   
   /* State dumping routine */
   public:
    void dump_state(unsigned int indent);
   
   /* VCD dumping routines */
   public:
    unsigned int dump_VCD_defs(unsigned int levels);
    void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkRFile &backing);
    void vcd_defs(tVCDDumpType dt, MOD_mkRFile &backing);
    void vcd_prims(tVCDDumpType dt, MOD_mkRFile &backing);
  };
}

#endif /* ifndef __mkRFile_h__ */
