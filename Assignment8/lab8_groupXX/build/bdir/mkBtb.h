/*
 * Generated by Bluespec Compiler, version 2011.06.D (build 24470, 2011-06-30)
 * 
 * On Thu Apr  3 22:01:48 IST 2014
 * 
 */

/* Generation options: */
#ifndef __mkBtb_h__
#define __mkBtb_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"

namespace bluesim
{
  
  /* Class declaration for the mkBtb module */
  class MOD_mkBtb : public Module {
   
   /* Clock handles */
   private:
    tClock __clk_handle_0;
   
   /* Instantiation parameters */
   public:
   
   /* Module state */
   public:
    MOD_RegFile<tUInt8,tUInt32> INST_arr;
    MOD_RegFile<tUInt8,tUInt32> INST_tagArr;
    MOD_Reg<tUInt8> INST_validArr;
    MOD_Reg<tUInt8> INST_validArr_1;
    MOD_Reg<tUInt8> INST_validArr_10;
    MOD_Reg<tUInt8> INST_validArr_11;
    MOD_Reg<tUInt8> INST_validArr_12;
    MOD_Reg<tUInt8> INST_validArr_13;
    MOD_Reg<tUInt8> INST_validArr_14;
    MOD_Reg<tUInt8> INST_validArr_15;
    MOD_Reg<tUInt8> INST_validArr_16;
    MOD_Reg<tUInt8> INST_validArr_17;
    MOD_Reg<tUInt8> INST_validArr_18;
    MOD_Reg<tUInt8> INST_validArr_19;
    MOD_Reg<tUInt8> INST_validArr_2;
    MOD_Reg<tUInt8> INST_validArr_20;
    MOD_Reg<tUInt8> INST_validArr_21;
    MOD_Reg<tUInt8> INST_validArr_22;
    MOD_Reg<tUInt8> INST_validArr_23;
    MOD_Reg<tUInt8> INST_validArr_24;
    MOD_Reg<tUInt8> INST_validArr_25;
    MOD_Reg<tUInt8> INST_validArr_26;
    MOD_Reg<tUInt8> INST_validArr_27;
    MOD_Reg<tUInt8> INST_validArr_28;
    MOD_Reg<tUInt8> INST_validArr_29;
    MOD_Reg<tUInt8> INST_validArr_3;
    MOD_Reg<tUInt8> INST_validArr_30;
    MOD_Reg<tUInt8> INST_validArr_31;
    MOD_Reg<tUInt8> INST_validArr_32;
    MOD_Reg<tUInt8> INST_validArr_33;
    MOD_Reg<tUInt8> INST_validArr_34;
    MOD_Reg<tUInt8> INST_validArr_35;
    MOD_Reg<tUInt8> INST_validArr_36;
    MOD_Reg<tUInt8> INST_validArr_37;
    MOD_Reg<tUInt8> INST_validArr_38;
    MOD_Reg<tUInt8> INST_validArr_39;
    MOD_Reg<tUInt8> INST_validArr_4;
    MOD_Reg<tUInt8> INST_validArr_40;
    MOD_Reg<tUInt8> INST_validArr_41;
    MOD_Reg<tUInt8> INST_validArr_42;
    MOD_Reg<tUInt8> INST_validArr_43;
    MOD_Reg<tUInt8> INST_validArr_44;
    MOD_Reg<tUInt8> INST_validArr_45;
    MOD_Reg<tUInt8> INST_validArr_46;
    MOD_Reg<tUInt8> INST_validArr_47;
    MOD_Reg<tUInt8> INST_validArr_48;
    MOD_Reg<tUInt8> INST_validArr_49;
    MOD_Reg<tUInt8> INST_validArr_5;
    MOD_Reg<tUInt8> INST_validArr_50;
    MOD_Reg<tUInt8> INST_validArr_51;
    MOD_Reg<tUInt8> INST_validArr_52;
    MOD_Reg<tUInt8> INST_validArr_53;
    MOD_Reg<tUInt8> INST_validArr_54;
    MOD_Reg<tUInt8> INST_validArr_55;
    MOD_Reg<tUInt8> INST_validArr_56;
    MOD_Reg<tUInt8> INST_validArr_57;
    MOD_Reg<tUInt8> INST_validArr_58;
    MOD_Reg<tUInt8> INST_validArr_59;
    MOD_Reg<tUInt8> INST_validArr_6;
    MOD_Reg<tUInt8> INST_validArr_60;
    MOD_Reg<tUInt8> INST_validArr_61;
    MOD_Reg<tUInt8> INST_validArr_62;
    MOD_Reg<tUInt8> INST_validArr_63;
    MOD_Reg<tUInt8> INST_validArr_7;
    MOD_Reg<tUInt8> INST_validArr_8;
    MOD_Reg<tUInt8> INST_validArr_9;
   
   /* Constructor */
   public:
    MOD_mkBtb(char const *name, Module *parent);
   
   /* Symbol init methods */
   private:
    void init_symbols_0();
   
   /* Reset signal definitions */
   private:
    tUInt8 PORT_RST_N;
   
   /* Port definitions */
   public:
    tUWide PORT_update_rd;
   
   /* Publicly accessible definitions */
   public:
   
   /* Local definitions */
   private:
   
   /* Rules */
   public:
   
   /* Methods */
   public:
    tUInt32 METH_predPc(tUInt32 ARG_predPc_pc);
    tUInt8 METH_RDY_predPc();
    void METH_update(tUWide ARG_update_rd);
    tUInt8 METH_RDY_update();
   
   /* Reset routines */
   public:
    void reset_RST_N(tUInt8 ARG_rst_in);
   
   /* Static handles to reset routines */
   public:
   
   /* Pointers to reset fns in parent module for asserting output resets */
   private:
   
   /* Functions for the parent module to register its reset fns */
   public:
   
   /* Functions to set the elaborated clock id */
   public:
    void set_clk_0(char const *s);
   
   /* State dumping routine */
   public:
    void dump_state(unsigned int indent);
   
   /* VCD dumping routines */
   public:
    unsigned int dump_VCD_defs(unsigned int levels);
    void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkBtb &backing);
    void vcd_defs(tVCDDumpType dt, MOD_mkBtb &backing);
    void vcd_prims(tVCDDumpType dt, MOD_mkBtb &backing);
  };
}

#endif /* ifndef __mkBtb_h__ */
