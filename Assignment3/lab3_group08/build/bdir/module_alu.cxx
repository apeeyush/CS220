/*
 * Generated by Bluespec Compiler, version 2011.06.D (build 24470, 2011-06-30)
 * 
 * On Sun Feb  9 14:26:59 IST 2014
 * 
 */
#include "bluesim_primitives.h"
#include "module_alu.h"

namespace bluesim
{
  
  /* Constructor */
  MOD_module_alu::MOD_module_alu(char const *name, Module *parent)
    : Module(name, parent)
  {
    symbol_count = 0u;
    init_symbols_0();
  }
  
  
  /* Symbol init fns */
  
  void MOD_module_alu::init_symbols_0()
  {
  }
  
  
  /* Rule actions */
  
  
  /* Methods */
  
  tUInt32 MOD_module_alu::METH_alu(tUInt32 ARG_alu_a, tUInt32 ARG_alu_b, tUInt8 ARG_alu_func)
  {
    tUInt32 PORT_alu;
    tUInt32 DEF_alu_a_PLUS_alu_b___d2;
    tUInt8 DEF_x__h104;
    tUInt8 DEF_x__h96;
    tUInt32 DEF_x__h85;
    tUInt32 DEF_IF_alu_func_EQ_1_THEN_alu_a_MINUS_alu_b_ELSE_I_ETC___d33;
    tUInt8 DEF_alu_func_EQ_0___d1;
    tUInt8 DEF_c__h206;
    DEF_c__h206 = (tUInt8)((tUInt8)31u & ARG_alu_b);
    DEF_alu_func_EQ_0___d1 = ARG_alu_func == (tUInt8)0u;
    DEF_x__h85 = ARG_alu_a | ARG_alu_b;
    DEF_x__h96 = primSLT8(1u, 32u, (tUInt32)(ARG_alu_a), 32u, (tUInt32)(ARG_alu_b));
    DEF_x__h104 = ARG_alu_a < ARG_alu_b;
    DEF_IF_alu_func_EQ_1_THEN_alu_a_MINUS_alu_b_ELSE_I_ETC___d33 = ARG_alu_func == (tUInt8)1u ? ARG_alu_a - ARG_alu_b : (ARG_alu_func == (tUInt8)2u ? ARG_alu_a & ARG_alu_b : (ARG_alu_func == (tUInt8)3u ? DEF_x__h85 : (ARG_alu_func == (tUInt8)4u ? ARG_alu_a ^ ARG_alu_b : (ARG_alu_func == (tUInt8)5u ? ~DEF_x__h85 : (ARG_alu_func == (tUInt8)6u ? (tUInt32)(DEF_x__h96) : (ARG_alu_func == (tUInt8)7u ? (tUInt32)(DEF_x__h104) : (ARG_alu_func == (tUInt8)8u ? primShiftL32(32u,
																																																										   32u,
																																																										   (tUInt32)(ARG_alu_a),
																																																										   5u,
																																																										   (tUInt8)(DEF_c__h206)) : (ARG_alu_func == (tUInt8)9u ? primShiftR32(32u,
																																																																		       32u,
																																																																		       (tUInt32)(ARG_alu_a),
																																																																		       5u,
																																																																		       (tUInt8)(DEF_c__h206)) : primShiftRA32(32u,
																																																																							      32u,
																																																																							      (tUInt32)(ARG_alu_a),
																																																																							      5u,
																																																																							      (tUInt8)(DEF_c__h206))))))))));
    DEF_alu_a_PLUS_alu_b___d2 = ARG_alu_a + ARG_alu_b;
    PORT_alu = DEF_alu_func_EQ_0___d1 ? DEF_alu_a_PLUS_alu_b___d2 : DEF_IF_alu_func_EQ_1_THEN_alu_a_MINUS_alu_b_ELSE_I_ETC___d33;
    return PORT_alu;
  }
  
  tUInt8 MOD_module_alu::METH_RDY_alu()
  {
    tUInt8 PORT_RDY_alu;
    tUInt8 DEF_CAN_FIRE_alu;
    DEF_CAN_FIRE_alu = (tUInt8)1u;
    PORT_RDY_alu = DEF_CAN_FIRE_alu;
    return PORT_RDY_alu;
  }
  
  
  /* Reset routines */
  
  
  /* Static handles to reset routines */
  
  
  /* Functions for the parent module to register its reset fns */
  
  
  /* Functions to set the elaborated clock id */
  
  
  /* State dumping routine */
  void MOD_module_alu::dump_state(unsigned int indent)
  {
  }
  
  
  /* VCD dumping routines */
  
  unsigned int MOD_module_alu::dump_VCD_defs(unsigned int levels)
  {
    fprintf(vcd_file, "$scope module %s $end\n", inst_name);
    vcd_num = vcd_reserve_ids(0u);
    unsigned int num = vcd_num;
    for (unsigned int hdl = 0u; hdl < bk_num_clocks(); ++hdl)
      vcd_add_clock_def(this, bk_clock_name(hdl), bk_clock_vcd_num(hdl));
    fprintf(vcd_file, "$upscope $end\n");
    return num;
  }
  
  void MOD_module_alu::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_module_alu &backing)
  {
  }
}
